Index: src/main/java/dcs/aber/ac/uk/csm2020_group_3/DatabaseHandler/DatabaseConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dcs.aber.ac.uk.csm2020_group_3.DatabaseHandler;\r\n\r\nimport java.sql.*;\r\n\r\npublic class DatabaseConnection {\r\n    public static void main(String[] args) {\r\n        try {\r\n            // Create a connection to the database using Active Directory Password Authentication\r\n            String serverName = \"agile-server.database.windows.net\";\r\n            String databaseName = \"AGILEDB\";\r\n            String username = \"GroupAdmin\";\r\n            String password = \"2675PKfe7$u!\";\r\n\r\n            //String connectionString = String.format(\"jdbc:sqlserver://%s:1433;database=%s;user=%s;password=%s;encrypt=true;trustServerCertificate=false;loginTimeout=30;authentication=ActiveDirectoryPassword;\", serverName, databaseName, username, password);\r\n            String connectionString = String.format(\"jdbc:sqlserver://%s:1433;database=%s;user=%s;password=%s;encrypt=true;trustServerCertificate=false;loginTimeout=30;\", serverName, databaseName, username, password);\r\n            Connection connection = DriverManager.getConnection(connectionString);\r\n\r\n            // Execute a basic query\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM STUDENT\");\r\n\r\n            while (resultSet.next()) {\r\n                String column1 = resultSet.getString(\"StudentName\");\r\n                String column2 = resultSet.getString(\"StudentCourse\");\r\n                String column3 = resultSet.getString(\"StudentYear\");\r\n                String column4 = resultSet.getString(\"StudentPassword\");\r\n                String column5 = resultSet.getString(\"StudentID\");\r\n                System.out.println(column1);\r\n                System.out.println(column2);\r\n                System.out.println(column3);\r\n                System.out.println(column4);\r\n                System.out.println(column5);\r\n\r\n                // process the results\r\n            }\r\n\r\n            // Close the resources\r\n            resultSet.close();\r\n            statement.close();\r\n            connection.close();\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dcs/aber/ac/uk/csm2020_group_3/DatabaseHandler/DatabaseConnection.java b/src/main/java/dcs/aber/ac/uk/csm2020_group_3/DatabaseHandler/DatabaseConnection.java
--- a/src/main/java/dcs/aber/ac/uk/csm2020_group_3/DatabaseHandler/DatabaseConnection.java	(revision 1fbc636dd71634263c6b9b49d676d9d458b32adb)
+++ b/src/main/java/dcs/aber/ac/uk/csm2020_group_3/DatabaseHandler/DatabaseConnection.java	(date 1679326889623)
@@ -1,9 +1,11 @@
 package dcs.aber.ac.uk.csm2020_group_3.DatabaseHandler;
 
 import java.sql.*;
+import java.util.*;
 
 public class DatabaseConnection {
     public static void main(String[] args) {
+        Map<String, List<List<String>>> tablesData = null;
         try {
             // Create a connection to the database using Active Directory Password Authentication
             String serverName = "agile-server.database.windows.net";
@@ -11,36 +13,85 @@
             String username = "GroupAdmin";
             String password = "2675PKfe7$u!";
 
-            //String connectionString = String.format("jdbc:sqlserver://%s:1433;database=%s;user=%s;password=%s;encrypt=true;trustServerCertificate=false;loginTimeout=30;authentication=ActiveDirectoryPassword;", serverName, databaseName, username, password);
             String connectionString = String.format("jdbc:sqlserver://%s:1433;database=%s;user=%s;password=%s;encrypt=true;trustServerCertificate=false;loginTimeout=30;", serverName, databaseName, username, password);
             Connection connection = DriverManager.getConnection(connectionString);
 
-            // Execute a basic query
-            Statement statement = connection.createStatement();
-            ResultSet resultSet = statement.executeQuery("SELECT * FROM STUDENT");
-
-            while (resultSet.next()) {
-                String column1 = resultSet.getString("StudentName");
-                String column2 = resultSet.getString("StudentCourse");
-                String column3 = resultSet.getString("StudentYear");
-                String column4 = resultSet.getString("StudentPassword");
-                String column5 = resultSet.getString("StudentID");
-                System.out.println(column1);
-                System.out.println(column2);
-                System.out.println(column3);
-                System.out.println(column4);
-                System.out.println(column5);
-
-                // process the results
-            }
-
-            // Close the resources
-            resultSet.close();
-            statement.close();
+            // Get a list of all tables in the database
+            DatabaseMetaData metadata = connection.getMetaData();
+            ResultSet tables = metadata.getTables(null, null, null, new String[]{"TABLE"});
+
+            // Loop through all tables and select all rows
+            tablesData = new HashMap<>();
+            while (tables.next()) {
+                String tableName = tables.getString("TABLE_NAME");
+                if (!tableName.equals("trace_xe_event_map") && !tableName.equals("trace_xe_action_map")) {
+                    Statement statement = connection.createStatement();
+                    ResultSet resultSet = statement.executeQuery("SELECT * FROM " + tableName);
+                    List<List<String>> tableRows = new ArrayList<>();
+                    while (resultSet.next()) {
+                        ResultSetMetaData metaData = resultSet.getMetaData();
+                        int columnCount = metaData.getColumnCount();
+                        List<String> rowData = new ArrayList<>();
+                        for (int i = 1; i <= columnCount; i++) {
+                            String column = resultSet.getString(i);
+                            rowData.add(column);
+                        }
+                        tableRows.add(rowData);
+                    }
+                    tablesData.put(tableName, tableRows);
+                    resultSet.close();
+                    statement.close();
+                }
+            }
+
+
+            // Close the connection
             connection.close();
 
         } catch (SQLException e) {
             e.printStackTrace();
         }
+
+        // Print out the core modules for a specific student
+        List<List<String>> studentCoreModules = new ArrayList<>();
+
+        // Access data for the "STUDENT" and "CORE_MODULE" tables
+        List<List<String>> studentTableData = tablesData.get("STUDENT");
+        List<List<String>> coreModuleTableData = tablesData.get("CORE_MODULE");
+
+        // Get the student ID of interest
+        String studentID = "12345";
+
+        // Find the course ID and year for the student
+        String courseID = "";
+        String year = "";
+        for (List<String> row : studentTableData) {
+            if (row.get(0).equals(studentID)) {
+                courseID = row.get(2);
+                year = row.get(3);
+                break;
+            }
+        }
+
+        // Find the core modules for the course and year
+        for (List<String> row : coreModuleTableData) {
+            if (row.get(0).equals(courseID)) {
+                String moduleID = row.get(1);
+                for (List<String> moduleRow : tablesData.get("MODULE")) {
+                    if (moduleRow.get(0).equals(moduleID) && moduleRow.get(4).equals(year)) {
+                        studentCoreModules.add(moduleRow);
+                        break;
+                    }
+                }
+            }
+        }
+
+        // Print out the core modules
+        System.out.println("Core modules for student " + studentID + ":");
+        for (List<String> row : studentCoreModules) {
+            System.out.println(row.get(1)); // Print the module name
+        }
+
     }
-}
\ No newline at end of file
+
+}
